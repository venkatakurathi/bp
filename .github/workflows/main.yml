# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - BPCalculator-VA1

on:
  push:
    branches:
     - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
         args: --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
         sarif_file: snyk.sarif

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
         .\.sonar\scanner\dotnet-sonarscanner begin /k:"venkatakurathi_bp" /o:"venkatakurathi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
         dotnet build --configuration Release
         .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

     # - name: Depcheck
      #  uses: dependency-check/Dependency-Check_Action@main
       # id: Depcheck
        #with:
         # project: 'BP'
          #path: '.'
          #format: 'HTML'    
          #args: >
           # --failOnCVSS 8            
          # fail if CVSS score (CVE scoring system) is High >=8
          
      #- name: Upload Test results
       # uses: actions/upload-artifact@v3
        #with:
         #  name: Depcheck report
          # path: ${{github.workspace}}/reports

      - name: Run unit tests
        run: dotnet test BPCalculatorUnitTests\BPCalculatorUnitTests.csproj --collect "Code Coverage" -l:trx

      - name: Publish Unit Test Results
        uses: dorny/test-reporter@v1
        with:
          artifact : ''            # Name of the check run which will be created
          name : Unit Tests Report
          path: '**.trx'    # Path to test results
          reporter: 'dotnet-trx'

      - name: Run acceptance tests
        run: dotnet test UATTests\UATTests.csproj --collect "Code Coverage" -l:trx

      - name: Publish UAT test results
        uses: dorny/test-reporter@v1
        with:
         artifact: ''                                       # artifact name
         name: UAT Report                                   # Name of the check run which will be created
         path: '**.trx'                                     # Path to test results (inside artifact .zip)
         reporter: 'dotnet-trx'                             # Format of test results

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app
      
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'BPCalculator-VA1'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_5168CB129E6D4FF88724FFF83C3A3FF4 }}

      - name: Run Selenium tests        
        run: dotnet test ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}SeleniumTests.dll --logger:"trx;LogFileName=selenium.trx"
        # run: dotnet test SeleniumTests\SeleniumTests.csproj --collect "Code Coverage" -l:trx

  
      # Upload results of selenium tests as an artefact
      - uses: actions/upload-artifact@v3
        with:
         name: Selenium Tests Results
         path: TestResults/selenium.trx

         # SWAP SLOTS
    # login to Azure account
      - uses: azure/login@v1
        with:
         creds: ${{ secrets.AZURE_CREDENTIALS }}                         # JSON objects which represents service principal

    # blue/green
      # - name: swap staging and production slots
        # run: |
         # az webapp deployment slot swap -n BPCalculator-VA1 -g BPCalculator2023 --slot staging --target-slot production
